trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'devazure-admin-grupo1-vm-s3-devops'
  location: 'eastus2'
  resourceGroupName: 'GrupoRecursos-Grupo1-S3-DevOps'
  virtualNetworkName: 'RedVirtual-Grupo1-S3-DevOps'
  subnetName: 'SubRed-Grupo1-S2DevOps'
  addressPrefix: '10.0.0.0/24'
  subnetPrefix: '10.0.0.0/26'
  securityGroupName: 'GrupoSeguridadRed-NSG-Grupo1-S3-DevOps'
  publicIpName: 'miVM-Grupo1-S3-DevOps-ip'
  vmName: 'miVM-Grupo1-S3-DevOps'
  vmSize: 'Standard_B1s'
  adminUsername: 'user-s3-devops'
  adminPassword: 'Pass-s3-devops'

  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e

        echo "Creando grupo de recursos..."
        az group create --name $(resourceGroupName) --location "$(location)"
        echo "Grupo de recursos creado."

        echo "Creando red virtual..."
        az network vnet create \
          --resource-group $(resourceGroupName) \
          --name $(virtualNetworkName) \
          --address-prefix $(addressPrefix) \
          --subnet-name $(subnetName) \
          --subnet-prefix $(subnetPrefix)
        echo "Red virtual creada."
        az network vnet wait --resource-group $(resourceGroupName) --name $(virtualNetworkName) --created

        echo "Creando NSG..."
        az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)
        az network nsg wait --resource-group $(resourceGroupName) --name $(securityGroupName) --created

        echo "Reglas de NSG..."
        az network nsg rule create \
          --resource-group $(resourceGroupName) \
          --nsg-name $(securityGroupName) \
          --name AllowSSH \
          --protocol tcp --direction inbound --priority 1000 \
          --source-address-prefix '*' --source-port-range '*' \
          --destination-address-prefix '*' --destination-port-range 22 \
          --access allow

        az network nsg rule create \
          --resource-group $(resourceGroupName) \
          --nsg-name $(securityGroupName) \
          --name AllowHTTP \
          --protocol tcp --direction inbound --priority 1001 \
          --source-address-prefix '*' --source-port-range '*' \
          --destination-address-prefix '*' --destination-port-range 80 \
          --access allow

        az network nsg rule create \
          --resource-group $(resourceGroupName) \
          --nsg-name $(securityGroupName) \
          --name AllowICMP \
          --protocol icmp --direction inbound --priority 1002 \
          --source-address-prefix '*' --source-port-range '*' \
          --destination-address-prefix '*' --destination-port-range '*' \
          --access allow

        echo "Creando IP pública..."
        az network public-ip create \
          --resource-group $(resourceGroupName) \
          --name $(publicIpName) \
          --sku Standard \
          --allocation-method Static \
          --zone 1
        az network public-ip wait --resource-group $(resourceGroupName) --name $(publicIpName) --created

        ####### Desvincular IP si está asociada a otra NIC (fix robusto con --ids)
        pipcfg=$(az network public-ip show \
          -g $(resourceGroupName) -n $(publicIpName) \
          --query 'ipConfiguration.id' -o tsv || true)

        if [ -n "$pipcfg" ] && [ "$pipcfg" != "null" ]; then
          echo "Desvinculando IP de: $pipcfg"
          az network nic ip-config update \
            --ids "$pipcfg" \
            --remove publicIpAddress
        else
          echo "La IP no está asociada a ninguna NIC."
        fi
        #######

        echo "Creando máquina virtual..."
        az vm create \
          --resource-group $(resourceGroupName) \
          --name $(vmName) \
          --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) \
          --size $(vmSize) \
          --admin-username $(adminUsername) \
          --admin-password $(adminPassword) \
          --vnet-name $(virtualNetworkName) \
          --subnet $(subnetName) \
          --nsg $(securityGroupName) \
          --public-ip-address $(publicIpName)
        az vm wait --resource-group $(resourceGroupName) --name $(vmName) --created

        echo "Instalando Apache..."
        az vm run-command invoke \
          --resource-group $(resourceGroupName) \
          --name $(vmName) \
          --command-id RunShellScript \
          --scripts "sudo apt update && sudo apt install -y apache2"

        az vm run-command invoke \
          --resource-group $(resourceGroupName) \
          --name $(vmName) \
          --command-id RunShellScript \
          --scripts "echo 'hola curso devops hemos automatizado el despliegue de maquina virtual desde azure devops' | sudo tee /var/www/html/index.html"

        echo "Listo."
