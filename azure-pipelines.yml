trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'new-sc-azuredevops-test1'
  location: 'eastus2'

  resourceGroupName: 'GrupoRecursos-Grupo1-S3-DevOps'
  virtualNetworkName: 'RedVirtual-Grupo1-S3-DevOps'
  subnetName: 'SubRed-Grupo1-S2DevOps'
  addressPrefix: '10.0.0.0/24'
  subnetPrefix: '10.0.0.0/26'

  securityGroupName: 'GrupoSeguridadRed-NSG-Grupo1-S3-DevOps'
  publicIpName: 'miVM-Grupo1-S3-DevOps-ip'
  vmName: 'miVM-Grupo1-S3-DevOps'
  vmSize: 'Standard_B1s'

  adminUsername: 'user-s3-devops'
  # Usa una variable secreta definida en la UI de Pipelines:
  # adminPassword = (marcada como Secret)
  # Aquí solo la referenciamos:
  adminPassword: 'Lt9h-Quasar#4912'

  # Imagen Ubuntu 22.04 LTS Gen2 (Canonical)
  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

steps:
- task: AzureCLI@2
  displayName: 'Provisionar infraestructura + VM (SSH por contraseña habilitado)'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -e

      echo "== 0) Script post-creación para habilitar PasswordAuthentication =="
      cat > fix-ssh.sh <<'EOS'
      set -e
      sudo mkdir -p /etc/ssh/sshd_config.d
      # Escribimos config mínima que habilita password
      printf "%s\n" "PasswordAuthentication yes" "UsePAM yes" | sudo tee /etc/ssh/sshd_config.d/60-force-password.conf >/dev/null
      # Directorio runtime requerido por sshd
      sudo mkdir -p /run/sshd && sudo chmod 0755 /run/sshd
      # Si el archivo principal niega password, lo forzamos a yes
      sudo sed -i 's/^[#[:space:]]*PasswordAuthentication[[:space:]]\+no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
      # Validar sintaxis y reiniciar servicio
      sudo /usr/sbin/sshd -t -f /etc/ssh/sshd_config
      sudo systemctl restart ssh || sudo systemctl restart sshd
      # Mostrar parámetros efectivos (debug)
      sudo /usr/sbin/sshd -T 2>/dev/null | grep -Ei 'passwordauthentication|usepam' || true
      EOS

      echo "== 1) Grupo de recursos =="
      az group create --name $(resourceGroupName) --location "$(location)"

      echo "== 2) Red virtual + subred =="
      az network vnet create \
        --resource-group $(resourceGroupName) \
        --name $(virtualNetworkName) \
        --address-prefix $(addressPrefix) \
        --subnet-name $(subnetName) \
        --subnet-prefix $(subnetPrefix)

      echo "== 3) NSG y reglas (22/80/ICMP) =="
      az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowSSH --protocol Tcp --direction Inbound --priority 1000 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range 22 --access Allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowHTTP --protocol Tcp --direction Inbound --priority 1001 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range 80 --access Allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowICMP --protocol Icmp --direction Inbound --priority 1002 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range '*' --access Allow

      echo "== 4) IP pública (Standard/Static) =="
      az network public-ip create \
        --resource-group $(resourceGroupName) \
        --name $(publicIpName) \
        --sku Standard \
        --allocation-method Static

      echo "== 5) Crear VM (forzando autenticación por contraseña) =="
      az vm create \
        --resource-group $(resourceGroupName) \
        --name $(vmName) \
        --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) \
        --size $(vmSize) \
        --admin-username $(adminUsername) \
        --admin-password "$ADMIN_PASSWORD" \
        --authentication-type password \
        --vnet-name $(virtualNetworkName) \
        --subnet $(subnetName) \
        --nsg $(securityGroupName) \
        --public-ip-address $(publicIpName)

      echo "== 5.1) Arrancar y esperar a que la VM esté RUNNING =="
      # Asegura que esté creada y arrancada
      az vm wait --resource-group $(resourceGroupName) --name $(vmName) --created
      az vm start --resource-group $(resourceGroupName) --name $(vmName) || true

      # Esperar PowerState/running
      for i in {1..30}; do
        state=$(az vm get-instance-view -g $(resourceGroupName) -n $(vmName) \
          --query "instanceView.statuses[?starts_with(code,'PowerState/')].code" -o tsv)
        echo "PowerState: $state"
        [ "$state" = "PowerState/running" ] && break
        sleep 10
      done

      # (Opcional pero recomendado) Esperar VM Agent listo
      for i in {1..30}; do
        agent=$(az vm get-instance-view -g $(resourceGroupName) -n $(vmName) \
          --query "instanceView.vmAgent.statuses[0].displayStatus" -o tsv 2>/dev/null || true)
        echo "VM Agent: $agent"
        [ "$agent" = "Ready" ] && break
        sleep 5
      done


      echo "== 6) Aplicar fix de SSH dentro de la VM =="
      az vm run-command invoke -g $(resourceGroupName) -n $(vmName) \
        --command-id RunShellScript --scripts @fix-ssh.sh

      echo "== 7) (Opcional) Instalar Apache y página simple =="
      az vm run-command invoke -g $(resourceGroupName) -n $(vmName) \
        --command-id RunShellScript --scripts "sudo apt-get update -y && sudo apt-get install -y apache2"
      az vm run-command invoke -g $(resourceGroupName) -n $(vmName) \
        --command-id RunShellScript --scripts "echo 'hola somos el GRUPO1 RAMO semana 4: DEVOPS del curso devops hemos automatizado el despliegue de maquina virtual desde azure devops' | sudo tee /var/www/html/index.html"

      echo "== 8) IP pública para conectarte por SSH =="
      az vm show -d -g $(resourceGroupName) -n $(vmName) --query publicIps -o tsv
  env:
    ADMIN_PASSWORD: $(adminPassword)
