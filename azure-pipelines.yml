trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'new-sc-azuredevops-test1'
  location: 'eastus2'
  resourceGroupName: 'GrupoRecursos-Grupo1-S3-DevOps'
  virtualNetworkName: 'RedVirtual-Grupo1-S3-DevOps'
  subnetName: 'SubRed-Grupo1-S2DevOps'
  addressPrefix: '10.0.0.0/24'
  subnetPrefix: '10.0.0.0/26'
  securityGroupName: 'GrupoSeguridadRed-NSG-Grupo1-S3-DevOps'
  publicIpName: 'miVM-Grupo1-S3-DevOps-ip'
  vmName: 'miVM-Grupo1-S3-DevOps'
  vmSize: 'Standard_B1s'
  adminUsername: 'user-s3-devops'
  # ⚠️ En la UI define una variable secreta llamada adminPassword y NO la pongas en texto plano
  # adminPassword: '$(adminPassword)'

  # Imagen Ubuntu 22.04 LTS Gen2 (Canonical)
  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

steps:
- task: AzureCLI@2
  displayName: 'Provisionar infraestructura + VM (SSH por contraseña habilitado)'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      set -e

      echo "== 0) Crear archivo cloud-init (customdata.yml) =="
      cat > customdata.yml <<'CLOUD'
#cloud-config
write_files:
  - path: /etc/ssh/sshd_config.d/60-force-password.conf
    permissions: '0644'
    owner: root:root
    content: |
      PasswordAuthentication yes
      UsePAM yes
runcmd:
  - [ bash, -lc, "mkdir -p /run/sshd && chmod 0755 /run/sshd" ]
  - [ bash, -lc, "sed -i 's/^[#[:space:]]*PasswordAuthentication[[:space:]]\\+no/PasswordAuthentication yes/' /etc/ssh/sshd_config || true" ]
  - [ bash, -lc, "/usr/sbin/sshd -t -f /etc/ssh/sshd_config || (echo 'sshd config invalida' && exit 1)" ]
  - [ bash, -lc, "systemctl restart ssh || systemctl restart sshd" ]
CLOUD

      echo "== 1) Grupo de recursos =="
      az group create --name $(resourceGroupName) --location "$(location)"

      echo "== 2) Red virtual + subred =="
      az network vnet create \
        --resource-group $(resourceGroupName) \
        --name $(virtualNetworkName) \
        --address-prefix $(addressPrefix) \
        --subnet-name $(subnetName) \
        --subnet-prefix $(subnetPrefix)

      echo "== 3) NSG y reglas entrantes (22/80/ICMP) =="
      az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowSSH --protocol Tcp --direction Inbound --priority 1000 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range 22 --access Allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowHTTP --protocol Tcp --direction Inbound --priority 1001 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range 80 --access Allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) \
        --name AllowICMP --protocol Icmp --direction Inbound --priority 1002 \
        --source-address-prefix '*' --source-port-range '*' \
        --destination-address-prefix '*' --destination-port-range '*' --access Allow

      echo "== 4) IP pública (Standard, Estática) =="
      az network public-ip create \
        --resource-group $(resourceGroupName) \
        --name $(publicIpName) \
        --sku Standard \
        --allocation-method Static

      echo "== 5) Crear VM (forzando autenticación por contraseña + cloud-init) =="
      az vm create \
        --resource-group $(resourceGroupName) \
        --name $(vmName) \
        --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) \
        --size $(vmSize) \
        --admin-username $(adminUsername) \
        --admin-password "$(adminPassword)" \
        --authentication-type password \
        --vnet-name $(virtualNetworkName) \
        --subnet $(subnetName) \
        --nsg $(securityGroupName) \
        --public-ip-address $(publicIpName) \
        --custom-data customdata.yml

      echo "== 6) Esperar creación =="
      az vm wait --resource-group $(resourceGroupName) --name $(vmName) --created

      echo "== 7) (Opcional) Instalar Apache y página =="
      az vm run-command invoke -g $(resourceGroupName) -n $(vmName) --command-id RunShellScript --scripts "sudo apt update -y && sudo apt install -y apache2"
      az vm run-command invoke -g $(resourceGroupName) -n $(vmName) --command-id RunShellScript --scripts "echo 'hola somos el GRUPO1 RAMO semana 4: DEVOPS del curso devops hemos automatizado el despliegue de maquina virtual desde azure devops' | sudo tee /var/www/html/index.html"

      echo "== 8) IP pública para conectar por SSH =="
      az vm show -d -g $(resourceGroupName) -n $(vmName) --query publicIps -o tsv
